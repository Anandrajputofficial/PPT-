 **Question 1**
Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2),..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.

Ans-- var arrayPairSum = function(nums) {
  nums.sort((a, b) => a - b); // Sort the array in ascending order
  let sum = 0;
  
  // Sum the minimum elements in pairs
  for (let i = 0; i < nums.length; i += 2) {
    sum += nums[i];
  }
  
  return sum;
};


Question 2
Alice has n candies, where the ith candy is of type candyType[i]. Alice noticed that she started to gain weight, so she visited a doctor. 

The doctor advised Alice to only eat n / 2 of the candies she has (n is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice. 

Given the integer array candyType of length n, return the maximum number of different types of candies she can eat if she only eats n / 2 of them.

Ans--var distributeCandies = function(candyType) {
  const uniqueTypes = new Set(candyType); // Use a Set to store unique candy types
  const maxTypes = Math.min(uniqueTypes.size, candyType.length / 2); // Calculate the maximum number of types
  return maxTypes;
};

Question 3
We define a harmonious array as an array where the difference between its maximum value
and its minimum value is exactly 1.

Given an integer array nums, return the length of its longest harmonious subsequence
among all its possible subsequences.

A subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.

Ans-var findLHS = function(nums) {
  const frequencyMap = new Map();
  
  // Count the frequency of each number
  for (const num of nums) {
    frequencyMap.set(num, (frequencyMap.get(num) || 0) + 1);
  }
  
  let longestLength = 0;
  
  // Iterate over the frequency map
  for (const [num, frequency] of frequencyMap.entries()) {
    // Check if the adjacent numbers have a frequency that forms a harmonious subsequence
    if (frequencyMap.has(num + 1)) {
      const harmoniousLength = frequency + frequencyMap.get(num + 1);
      longestLength = Math.max(longestLength, harmoniousLength);
    }
  }
  
  return longestLength;
};

Question 4
You have a long flowerbed in which some of the plots are planted, and some are not.
However, flowers cannot be planted in adjacent plots.
Given an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return true if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule and false otherwise.

Ans--var canPlaceFlowers = function(flowerbed, n) {
  const length = flowerbed.length;
  let count = 0;
  
  for (let i = 0; i < length; i++) {
    // Check if the current plot is empty and its adjacent plots are also empty
    if (flowerbed[i] === 0 && (i === 0 || flowerbed[i - 1] === 0) && (i === length - 1 || flowerbed[i + 1] === 0)) {
      flowerbed[i] = 1; // Plant a flower in the current plot
      count++; // Increment the count of planted flowers
      
      if (count >= n) {
        return true; // Return true if the required number of flowers have been planted
      }
    }
  }
  
  return count >= n; // Return true if the count of planted flowers is greater than or equal to n
};

Question 5
Given an integer array nums, find three numbers whose product is maximum and return the maximum product.

Ans-- var maximumProduct = function(nums) {
  nums.sort((a, b) => a - b); // Sort the array in ascending order
  
  const n = nums.length;
  
  // Consider two scenarios:
  // 1. The product of the three largest numbers
  // 2. The product of the two smallest (negative) numbers and the largest number
  return Math.max(
    nums[n - 1] * nums[n - 2] * nums[n - 3],
    nums[0] * nums[1] * nums[n - 1]
  );
};

Question 6
Given an array of integers nums which is sorted in ascending order, and an integer target,
write a function to search target in nums. If target exists, then return its index. Otherwise,
return -1.

You must write an algorithm with O(log n) runtime complexity.

Ans-- var search = function(nums, target) {
  let left = 0;
  let right = nums.length - 1;
  
  while (left <= right) {
    const mid = Math.floor((left + right) / 2);
    
    if (nums[mid] === target) {
      return mid; // Target found, return the index
    } else if (nums[mid] < target) {
      left = mid + 1; // Target is in the right half
    } else {
      right = mid - 1; // Target is in the left half
    }
  }
  
  return -1; // Target not found
};

Question 7
An array is monotonic if it is either monotone increasing or monotone decreasing.

An array nums is monotone increasing if for all i <= j, nums[i] <= nums[j]. An array nums is
monotone decreasing if for all i <= j, nums[i] >= nums[j].

Given an integer array nums, return true if the given array is monotonic, or false otherwise.

Ans--var isMonotonic = function(nums) {
  const n = nums.length;
  let increasing = true;
  let decreasing = true;
  
  for (let i = 1; i < n; i++) {
    if (nums[i] < nums[i - 1]) {
      increasing = false;
    }
    if (nums[i] > nums[i - 1]) {
      decreasing = false;
    }
  }
  
  return increasing || decreasing;
};

Question 8
You are given an integer array nums and an integer k.

In one operation, you can choose any index i where 0 <= i < nums.length and change nums[i] to nums[i] + x where x is an integer from the range [-k, k]. You can apply this operation at most once for each index i.

The score of nums is the difference between the maximum and minimum elements in nums.

Return the minimum score of nums after applying the mentioned operation at most once for each index in it.


Ans--var minimumScore = function(nums, k) {
  const n = nums.length;
  let minScore = Infinity;
  
  for (let i = 0; i < n; i++) {
    for (let x = -k; x <= k; x++) {
      const modifiedNums = [...nums];
      modifiedNums[i] += x;
      const score = Math.max(...modifiedNums) - Math.min(...modifiedNums);
      minScore = Math.min(minScore, score);
    }
  }
  
  return minScore;
};
